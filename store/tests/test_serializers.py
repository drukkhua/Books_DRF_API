from django.db.models import Count, Case, When, Avgfrom django.test import TestCasefrom django.contrib.auth.models import Userfrom django.db.models import Ffrom store.models import Book, UserBookRelationfrom store.serializers import BooksSerializerclass BookSerializerTestCase(TestCase):    def setUp(self) -> None:        self.user1 = User.objects.create(username='User1', first_name='U_N1', last_name='U_L1')        self.user2 = User.objects.create(username='User2', first_name='U_N2', last_name='U_L2')        self.user3 = User.objects.create(username='User3', first_name='U_N3', last_name='U_L3')        self.book_1 = Book.objects.create(name='Test Book 1',                                          price=25, author_name='Author 1',                                          owner=self.user1)        self.book_2 = Book.objects.create(name='Test Book 2',                                          price=55, author_name='Author 1',                                          owner=self.user1)        # self.book_1.readers.add(self.user1)        # self.book_1.readers.add(self.user2)        UserBookRelation.objects.create(user=self.user1, book=self.book_1, like=True,                                        rate=5)        UserBookRelation.objects.create(user=self.user2, book=self.book_1, like=True,                                        rate=5)        UserBookRelation.objects.create(user=self.user3, book=self.book_1, like=True,                                        rate=4)        UserBookRelation.objects.create(user=self.user1, book=self.book_2, like=True,                                        rate=3)        UserBookRelation.objects.create(user=self.user2, book=self.book_2, like=True,                                        rate=4)        UserBookRelation.objects.create(user=self.user3, book=self.book_2, like=False)    def test_ok(self):        books = Book.objects.all().annotate(            annotated_likes=Count(Case(When(userbookrelation__like=True, then=1))),            rating=Avg('userbookrelation__rate'),            owner_name=F('owner__username')) \            .prefetch_related('readers').order_by('id')        data = BooksSerializer(books, many=True).data        expected_data = [            {                'id': self.book_1.id,                'name': 'Test Book 1',                'price': '25.00',                'author_name': 'Author 1',                # 'owner': self.user1.id,                # 'likes_count': 3,                'annotated_likes': 3,                'rating': '4.67',                'owner_name': 'User1',                'readers': [                    {                        'first_name': 'U_N1',                        'last_name': 'U_L1'                    },                    {                        'first_name': 'U_N2',                        'last_name': 'U_L2'                    },                    {                        'first_name': 'U_N3',                        'last_name': 'U_L3'                    }                ]            },            {                'id': self.book_2.id,                'name': 'Test Book 2',                'price': '55.00',                'author_name': 'Author 1',                # 'owner': self.user1.id,                # 'likes_count': 2,                'annotated_likes': 2,                'rating': '3.50',                'owner_name': 'User1',                'readers': [                    {                        'first_name': 'U_N1',                        'last_name': 'U_L1'                    },                    {                        'first_name': 'U_N2',                        'last_name': 'U_L2'                    },                    {                        'first_name': 'U_N3',                        'last_name': 'U_L3'                    }                ]            },        ]        self.assertEqual(data, expected_data)